[tool.poetry]
name = "itmo-queue-bot"
version = "0.1.0"
description = "Bot for managing queues for laboratory work"
authors = ["lysmux <kllraz@yandex.ru>"]
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"
aiogram = "^3.13.1"
aiogram-dialog = "^2.2.0"
pydantic = "^2.9.2"
pydantic-settings = "^2.6.0"
alembic = "^1.13.3"
sqlalchemy = "^2.0.36"
dishka = "^1.4.0"
aiohttp = "^3.10.10"
asyncpg = "^0.30.0"
redis = "^5.2.0"


[tool.poetry.group.dev.dependencies]
pyright = "^1.1.387"
ruff = "^0.7.1"
pre-commit = "^4.0.1"
watchfiles = "^0.24.0"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-cov = "^6.0.0"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.14.0"
pytest-deadfixtures = "^2.2.1"
coverage = "^7.6.4"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


########## Lint ##########
[tool.ruff]
line-length = 88
target-version = "py312"
show-fixes = true
src = ["app", "tests"]

[tool.ruff.lint]
select = [
    "F",      # Pyflakes
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "I",      # isort
    "UP",     # pyupgrade
    "ANN",    # flake8-annotations
    "B",      # flake8-bugbear
]
ignore = ["ANN10"]
pydocstyle = { convention = "google" }

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"**/alembic/versions/*.py" = ["D"] # Don't format docstrings in alembic migrations.
"tests/**.py" = ["S101"]  # use of `assert`

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true
########## Lint ##########


########## Tests ##########
[tool.coverage.run]
omit = ["tests/*", "/__main__.py", "/.venv/*", "**/site-packages/*"]
branch = true

[tool.coverage.report]
show_missing = true
#skip_covered = true
exclude_also = [
    "def repr",
    "raise NotImplementedError",
    "if name == .main.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--strict-markers --showlocals --verbosity 2"
log_level = "INFO"
########## Tests ##########


########## Pyright ##########
[tool.pyright]
include = ["app", "tests"]
typeCheckingMode = "basic"
########## Pyright ##########
